package sample.Group where

group :: Eq a => [a] -> [[a]]
group = foldr dist []

dist :: Eq a => a -> [[a]] -> [[a]]
dist x [] = [[x]]
dist x (xs:ys)
	| x == head xs = (x:xs):ys
	| otherwise    = [x]:xs:ys

group2 :: Eq a => [a] -> [[a]]
group2 [] = []
group2 [x] = [[x]]
group2 (x:xs) = 
	let ys = group xs
	in if x == (head . head) ys then (x:head ys):(tail ys) else [x]:ys

group3 :: Eq a => [a] -> [[a]]
group3 [] = []
group3 [x] = [[x]]
group3 (all@x:xs) = ys:group3 zs
	where (ys, zs) = span' (x ==) all

span' :: (a -> Bool) -> [a] -> ([a], [a])
span' _ [] = ([], [])
span' p (all@x:xs)
	| p x       = let (ys, zs) = span' p xs in (x:ys, zs)
	| otherwise = ([], all)

main args = do
	println $ group [1, 1, 2, 3, 3, 3]
	println $ group ["A", "B", "B", "C", "A", "A", "B", "B"]

	println $ group2 [1, 1, 2, 3, 3, 3]
	println $ group2 ["A", "B", "B", "C", "A", "A", "B", "B"]

	println $ group3 [1, 1, 2, 3, 3, 3]
	println $ group3 ["A", "B", "B", "C", "A", "A", "B", "B"]
