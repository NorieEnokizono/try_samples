/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ » ∀ ∃ ∷ … → ← ﬁ ﬂ ƒ
  If you can't read this, you're out of luck. This code was generated with the frege compiler version 3.24.6
  from newtype_sample.fr Do not edit this file! Instead, edit the source file and recompile.
*/

import frege.run8.Func;
import frege.run8.Lazy;
import frege.run8.Thunk;
import frege.run.Kind;
import frege.run.RunTM;
import frege.runtime.Meta;
import frege.runtime.Phantom.RealWorld;
import frege.Prelude;
import frege.control.Category;
import frege.control.Semigroupoid;
import frege.java.IO;
import frege.java.Lang;
import frege.java.Util;
import frege.java.util.Regex;
import frege.prelude.Maybe;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeList;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;

@SuppressWarnings("unused")
@Meta.FregePackage(
  source="newtype_sample.fr", time=1457883330817L, jmajor=1, jminor=8,
  imps={
    "frege.Prelude", "frege.prelude.PreludeArrays", "frege.prelude.PreludeBase", "frege.prelude.PreludeIO",
    "frege.prelude.PreludeList", "frege.prelude.PreludeMonad", "frege.prelude.PreludeText", "frege.java.util.Regex"
  },
  nmss={"Prelude", "PreludeArrays", "PreludeBase", "PreludeIO", "PreludeList", "PreludeMonad", "PreludeText", "Regexp"},
  symas={}, symcs={}, symis={},
  symts={
    @Meta.SymT(
      offset=38, name=@Meta.QName(kind=0, pack="NewTypeSample", base="Sample"), typ=0,
      kind=2,
      cons={
        @Meta.SymD(
          offset=49, name=@Meta.QName(kind=2, pack="NewTypeSample", base="Sample", member="Sample"), cid=0,
          typ=2, fields={@Meta.Field(name="runSample", offset=58, sigma=1, strict=false)}
        )
      },
      lnks={},
      funs={
        @Meta.SymV(
          offset=59, name=@Meta.QName(kind=2, pack="NewTypeSample", base="Sample", member="upd$runSample"),
          stri="s(su)", sig=5, depth=2, rkind=49, doc="update field @runSample@"
        ),
        @Meta.SymV(
          offset=59, name=@Meta.QName(kind=2, pack="NewTypeSample", base="Sample", member="has$runSample"), stri="s(u)",
          sig=6, depth=1, rkind=49, doc="check if constructor has field @runSample@"
        ),
        @Meta.SymV(
          offset=59, name=@Meta.QName(kind=2, pack="NewTypeSample", base="Sample", member="chg$runSample"),
          stri="s(ss)", sig=9, depth=2, rkind=49, doc="change field @runSample@"
        ),
        @Meta.SymV(
          offset=59, name=@Meta.QName(kind=2, pack="NewTypeSample", base="Sample", member="runSample"), stri="s(s)",
          sig=10, depth=1, rkind=49, doc="access field @runSample@"
        )
      },
      prod=true, newt=true
    )
  },
  symvs={
    @Meta.SymV(offset=78, name=@Meta.QName(pack="NewTypeSample", base="main"), stri="s(u)", sig=12, depth=1, rkind=49)
  },
  symls={
    @Meta.SymL(
      offset=49, name=@Meta.QName(pack="NewTypeSample", base="Sample"),
      alias=@Meta.QName(kind=2, pack="NewTypeSample", base="Sample", member="Sample")
    )
  },
  taus={
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="NewTypeSample", base="Sample")}),
    @Meta.Tau(suba=1, tvar="a"), @Meta.Tau(kind=0, suba=0, subb=1), @Meta.Tau(suba=0, tvar="a"),
    @Meta.Tau(kind=0, suba=0, subb=3), @Meta.Tau(suba=0, tvar="β"), @Meta.Tau(kind=0, suba=0, subb=5),
    @Meta.Tau(suba=0, tvar="α"), @Meta.Tau(kind=0, suba=0, subb=7),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Bool")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="->")}),
    @Meta.Tau(kind=0, suba=10, subb=7), @Meta.Tau(kind=0, suba=11, subb=5),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="[]")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="StringJ")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Char")}),
    @Meta.Tau(kind=0, suba=14, subb=15), @Meta.Tau(kind=0, suba=13, subb=16),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="ST")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="RealWorld")}),
    @Meta.Tau(kind=0, suba=18, subb=19),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="()")}),
    @Meta.Tau(kind=0, suba=20, subb=21)
  },
  rhos={
    @Meta.Rho(rhofun=false, rhotau=2), @Meta.Rho(rhofun=false, rhotau=3), @Meta.Rho(rhofun=false, rhotau=4),
    @Meta.Rho(sigma=1, rhotau=2), @Meta.Rho(rhofun=false, rhotau=6), @Meta.Rho(rhofun=false, rhotau=7),
    @Meta.Rho(rhofun=false, rhotau=8), @Meta.Rho(sigma=4, rhotau=6), @Meta.Rho(sigma=3, rhotau=7),
    @Meta.Rho(rhofun=false, rhotau=9), @Meta.Rho(sigma=4, rhotau=9), @Meta.Rho(rhofun=false, rhotau=12),
    @Meta.Rho(sigma=8, rhotau=4), @Meta.Rho(sigma=7, rhotau=12), @Meta.Rho(sigma=7, rhotau=5),
    @Meta.Rho(rhofun=false, rhotau=17), @Meta.Rho(rhofun=false, rhotau=22), @Meta.Rho(sigma=11, rhotau=16)
  },
  sigmas={
    @Meta.Sigma(bound={"a"}, kinds={0}, rho=0), @Meta.Sigma(rho=1), @Meta.Sigma(bound={"a"}, kinds={0}, rho=3),
    @Meta.Sigma(rho=4), @Meta.Sigma(rho=5), @Meta.Sigma(bound={"α", "β"}, kinds={0, 0}, rho=8),
    @Meta.Sigma(bound={"α"}, kinds={0}, rho=10), @Meta.Sigma(rho=6), @Meta.Sigma(rho=11),
    @Meta.Sigma(bound={"α", "β"}, kinds={0, 0}, rho=13), @Meta.Sigma(bound={"α"}, kinds={0}, rho=14),
    @Meta.Sigma(rho=15), @Meta.Sigma(rho=17)
  },
  exprs={@Meta.Expr()}, kinds={@Meta.Kind(kind=0), @Meta.Kind(kind=2), @Meta.Kind(kind=3, suba=0, subb=0)}
)
final public class NewTypeSample  {
  



public static abstract class TSample  {
  final public static <α, β> α upd$runSample(final β arg$1, final Lazy<α> arg$2) {
    return arg$2.call();
  }
  final public static <α> boolean has$runSample(final Lazy<α> arg$1) {
    return true;
  }
  final public static <α, β> β chg$runSample(final α arg$1, final Func.U<α, β> arg$2) {
    return arg$2.apply(Thunk.<α>lazy(arg$1)).call();
  }
  final public static <α> α runSample(final α arg$1) {
    return arg$1;
  }
}
final public static Func.U<RealWorld, Short> $main(final Lazy<PreludeBase.TList<String/*<Character>*/>> arg$1) {
  return PreludeMonad.IMonad_ST.<Short, Short, RealWorld>$gt$gt(
            PreludeBase.<Func.U<RealWorld, Short>, String/*<Character>*/>$(
                  (Func.U<String/*<Character>*/, Func.U<RealWorld, Short>>)((
                    final Lazy<String/*<Character>*/> η$19639
                  ) -> Thunk.<Func.U<RealWorld, Short>>shared(
                            (Lazy<Func.U<RealWorld, Short>>)(() -> Prelude.<String/*<Character>*/>println(
                                      PreludeText.IShow_String.it, η$19639.call()
                                    ))
                          )),
                  Thunk.<String/*<Character>*/>nested(
                        (Lazy<Lazy<String/*<Character>*/>>)(() -> PreludeBase.<String/*<Character>*/, String/*<Character>*/>$(
                                  (Func.U<String/*<Character>*/, String/*<Character>*/>)((
                                    final Lazy<String/*<Character>*/> η$19634
                                  ) -> Thunk.<String/*<Character>*/>shared(
                                            (Lazy<String/*<Character>*/>)(() -> TSample.<
                                                  String/*<Character>*/
                                                >runSample(η$19634.call()))
                                          )),
                                  Thunk.<String/*<Character>*/>lazy("abc")
                                ))
                      )
                ).call(),
            Thunk.<Func.U<RealWorld, Short>>nested(
                  (Lazy<Lazy<Func.U<RealWorld, Short>>>)(() -> PreludeBase.<Func.U<RealWorld, Short>, Integer>$(
                            (Func.U<Integer, Func.U<RealWorld, Short>>)((final Lazy<Integer> η$19633) -> Thunk.<
                                  Func.U<RealWorld, Short>
                                >shared(
                                      (Lazy<Func.U<RealWorld, Short>>)(() -> Prelude.<
                                            Integer
                                          >println(PreludeText.IShow_Int.it, (int)η$19633.call()))
                                    )),
                            Thunk.<Integer>nested(
                                  (Lazy<Lazy<Integer>>)(() -> PreludeBase.<Integer, Integer>$(
                                            (Func.U<Integer, Integer>)((final Lazy<Integer> η$19636) -> Thunk.<
                                                  Integer
                                                >shared(
                                                      (Lazy<Integer>)(() -> TSample.<Integer>runSample(
                                                                (int)η$19636.call()
                                                              ))
                                                    )),
                                            Thunk.<Integer>lazy(101)
                                          ))
                                )
                          ))
                )
          );
}

  public static void main(final java.lang.String[] argv) {
    try {
      frege.run.RunTM.argv = argv;
      
        PreludeBase.TST.<Short>performUnsafe($main
               (Thunk.lazy(PreludeArrays.IListSource_JArray.<String/*<Character>*/>toList(argv)))
          ).call();

    } finally { frege.run8.Concurrent.shutDownIfExists(); }
  }
}
